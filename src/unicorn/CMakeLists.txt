file(GLOB_RECURSE srclist  *.asm *.c *.h)
#file(RELATIVE_PATH srclist   *.asm *.c *.h)
#add_executable(sleighexample ${srclist})
file(GLOB softmmu_sources qemu/fpu/*.[ch])
file(GLOB hw_arm_sources qemu/hw/*.[ch])

file(GLOB target_arm_sources qemu/target-arm/*.[ch])
file(GLOB target_i386_sources qemu/target-i386/*.[ch])
file(GLOB target_m68k_sources qemu/target-m68k/*.[ch])
file(GLOB target_mips_sources qemu/target-mips/*.[ch])
file(GLOB target_sparc_sources qemu/target-sparc/*.[ch])
file(GLOB tcg_sources qemu/tcg/*.[ch] qemu/tcg/i386/*.[ch])

set(archlist "")
list(APPEND archlist "aarch64eb-softmmu")
list(APPEND archlist "aarch64-softmmu")
list(APPEND archlist "armeb-softmmu")
list(APPEND archlist "arm-softmmu")
list(APPEND archlist "m68k-softmmu")
list(APPEND archlist "mips64el-softmmu")
list(APPEND archlist "mips64-softmmu")
list(APPEND archlist "mipsel-softmmu")
list(APPEND archlist "mips-softmmu")
list(APPEND archlist "sparc64-softmmu")
list(APPEND archlist "sparc-softmmu")
list(APPEND archlist "x86_64-softmmu")

add_library(aarch64eb-softmmu ${target_arm_sources})
add_library(aarch64-softmmu ${target_arm_sources})
add_library(armeb-softmmu ${target_arm_sources})
add_library(arm-softmmu ${target_arm_sources})
add_library(m68k-softmmu ${target_m68k_sources})
add_library(mips64el-softmmu ${target_mips_sources})
add_library(mips64-softmmu ${target_mips_sources})
add_library(mipsel-softmmu ${target_mips_sources})
add_library(mips-softmmu ${target_mips_sources})
add_library(sparc64-softmmu ${target_mips_sources})
add_library(sparc-softmmu ${target_mips_sources})
add_library(x86_64-softmmu ${target_i386_sources})

foreach(arch-softmmu IN LISTS archlist)
    target_sources(${arch-softmmu} PRIVATE ${softmmu_sources})
    set_target_properties(${arch-softmmu} PROPERTIES FOLDER "unicorn")
endforeach()

add_library(unicorn ${srclist})

#variable_watch(CMAKE_CURRENT_SOURCE_DIR)

#target_compile_definitions(sleighexample PUBLIC SLEIGHEXAMPLE)
#target_compile_definitions(unicorn PUBLIC __i386__)

#target_link_libraries(sleighexample mcore Shlwapi)
#target_link_libraries(dobc sleigh_lib mcore Shlwapi)

include_directories(include)
include_directories(priv)
include_directories(qemu)
include_directories(qemu/include)

# 在visual studio中，根据目录建立对应的filter
foreach(source IN LISTS srclist)
    get_filename_component(source_path "${source}" PATH)
    string(REPLACE ${CMAKE_CURRENT_SOURCE_DIR} "" source_path "${source_path}")
    string(REPLACE "/" "\\" source_path_msvc "${source_path}")

    #variable_watch(source_path_msvc)
    source_group("${source_path_msvc}" FILES "${source}")
endforeach()