file(GLOB_RECURSE srclist  *.asm *.c *.h)
#file(RELATIVE_PATH srclist   *.asm *.c *.h)
#add_executable(sleighexample ${srclist})

set(archlist "")
list(APPEND archlist "aarch64eb-softmmu")
list(APPEND archlist "aarch64-softmmu")
list(APPEND archlist "armeb-softmmu")
list(APPEND archlist "arm-softmmu")
list(APPEND archlist "m68k-softmmu")
list(APPEND archlist "mips64el-softmmu")
list(APPEND archlist "mips64-softmmu")
list(APPEND archlist "mipsel-softmmu")
list(APPEND archlist "mips-softmmu")
list(APPEND archlist "sparc64-softmmu")
list(APPEND archlist "sparc-softmmu")
list(APPEND archlist "x86_64-softmmu")
file(GLOB fpu_sources qemu/fpu/*.[ch])
file(GLOB hw_arm_sources qemu/hw/*.[ch])

file(GLOB target_arm_sources qemu/target-arm/*.[ch])
file(GLOB target_i386_sources qemu/target-i386/*.[ch])
file(GLOB target_m68k_sources qemu/target-m68k/*.[ch])
file(GLOB target_mips_sources qemu/target-mips/*.[ch])
file(GLOB target_sparc_sources qemu/target-sparc/*.[ch])
file(GLOB tcg_sources qemu/tcg/*.[ch] qemu/tcg/i386/*.[ch])
file(GLOB core_sources cpu-exec.c cpus.c cputlb.c exce.c ioport.c memory.c memory_mapping.c translate-all.c)

add_library(aarch64eb-softmmu ${target_arm_sources})
add_library(aarch64-softmmu ${target_arm_sources})
add_library(armeb-softmmu ${target_arm_sources})
add_library(arm-softmmu ${target_arm_sources})
add_library(m68k-softmmu ${target_m68k_sources})
add_library(mips64el-softmmu ${target_mips_sources})
add_library(mips64-softmmu ${target_mips_sources})
add_library(mipsel-softmmu ${target_mips_sources})
add_library(mips-softmmu ${target_mips_sources})
add_library(sparc64-softmmu ${target_mips_sources})
add_library(sparc-softmmu ${target_mips_sources})
add_library(x86_64-softmmu ${target_i386_sources})
add_library(unicorn STATIC ${srclist})

target_include_directories(aarch64eb-softmmu PRIVATE qemu/target-arm)
target_include_directories(aarch64-softmmu PRIVATE qemu/target-arm)
target_include_directories(armeb-softmmu PRIVATE qemu/target-arm)
target_include_directories(arm-softmmu PRIVATE qemu/target-arm)
target_include_directories(m68k-softmmu PRIVATE qemu/target-m68k)
target_include_directories(mips64el-softmmu PRIVATE qemu/target-mips)
target_include_directories(mips64-softmmu PRIVATE qemu/target-mips)
target_include_directories(mipsel-softmmu PRIVATE qemu/target-mips)
target_include_directories(mips-softmmu PRIVATE qemu/target-mips)
target_include_directories(sparc64-softmmu PRIVATE qemu/target-sparc)
target_include_directories(sparc-softmmu PRIVATE qemu/target-sparc)
target_include_directories(x86_64-softmmu PRIVATE qemu/target-i386)

target_compile_options(aarch64eb-softmmu PRIVATE
    /FIaarch64eb.h
    /I${CMAKE_CURRENT_SOURCE_DIR}/msvc/unicorn/aarch64eb-softmmu
    /I${CMAKE_CURRENT_SOURCE_DIR}/qemu/target-arm
)

foreach(arch-softmmu IN LISTS archlist)
    target_sources(${arch-softmmu} PRIVATE ${hw_arm_sources})
    target_sources(${arch-softmmu} PRIVATE ${fpu_sources})
    target_sources(${arch-softmmu} PRIVATE ${tcg_sources})
    target_sources(${arch-softmmu} PRIVATE ${core_sources})
    #target_sources(${arch-softmmu} PRIVATE msvc/unicorn/${arch-softmmu}/config-target.h)
    target_include_directories(${arch-softmmu} PRIVATE msvc/unicorn/)
    target_include_directories(${arch-softmmu} PRIVATE msvc/unicorn/${arch-softmmu}/)
    target_include_directories(${arch-softmmu} PRIVATE qemu/tcg/)
    target_include_directories(${arch-softmmu} PRIVATE qemu/include/)
    set_target_properties(${arch-softmmu} PROPERTIES FOLDER "unicorn")

    target_compile_definitions(${arch-softmmu} PRIVATE inline=__inline)
    target_compile_definitions(${arch-softmmu} PRIVATE __func__=__FUNCTION__)
    target_compile_definitions(${arch-softmmu} PRIVATE NEED_CPU_H)
    target_compile_definitions(${arch-softmmu} PRIVATE WIN32_LEAN_AND_MEAN)
    target_compile_definitions(${arch-softmmu} PRIVATE _CRT_SECURE_NO_WARNINGS)
    target_compile_definitions(${arch-softmmu} PRIVATE _WINSOCK_DEPRECATED_NO_WARNINGS)
    
    #target_compile_options(${arch-softmmu} PRIVATE "/wd4018 /wd4244 /wd4267")
    if (MSVC)
        target_compile_options(${arch-softmmu} PRIVATE /wd4018)
        target_compile_options(${arch-softmmu} PRIVATE /wd4244)
        target_compile_options(${arch-softmmu} PRIVATE /wd4267)
    endif()

    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        target_compile_definitions(${arch-softmmu} PRIVATE __x86_64__)
    elseif (CMAKE_SIZEOF_VOID_P EQUAL 4)
        target_compile_definitions(${arch-softmmu} PRIVATE __i386__)
        target_include_directories(${arch-softmmu} PRIVATE qemu/tcg/i386)
    endif()

    target_link_libraries(unicorn PUBLIC ${arch-softmmu})
endforeach()

target_compile_definitions(unicorn PUBLIC UNICORN_HAS_X86)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_ARM)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_M68K)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_ARM64)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_MIPS)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_MIPSEL)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_MIPS64)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_MIPS64EL)
target_compile_definitions(unicorn PUBLIC UNICORN_HAS_SPARC)

#variable_watch(CMAKE_CURRENT_SOURCE_DIR)

#target_compile_definitions(sleighexample PUBLIC SLEIGHEXAMPLE)
#target_compile_definitions(unicorn PUBLIC __i386__)

#target_link_libraries(sleighexample mcore Shlwapi)
#target_link_libraries(dobc sleigh_lib mcore Shlwapi)

include_directories(include)
include_directories(priv)
include_directories(qemu)
include_directories(qemu/include)

# 在visual studio中，根据目录建立对应的filter
foreach(source IN LISTS srclist)
    get_filename_component(source_path "${source}" PATH)
    string(REPLACE ${CMAKE_CURRENT_SOURCE_DIR} "" source_path "${source_path}")
    string(REPLACE "/" "\\" source_path_msvc "${source_path}")

    #variable_watch(source_path_msvc)
    source_group("${source_path_msvc}" FILES "${source}")
endforeach()